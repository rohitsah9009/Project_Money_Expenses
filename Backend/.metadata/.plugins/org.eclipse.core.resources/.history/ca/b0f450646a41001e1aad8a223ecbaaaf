package org.jsp.moneyexpenses.service;

import java.util.Optional;

import org.jsp.moneyexpenses.dao.UserDao;
import org.jsp.moneyexpenses.dto.ResponseStructure;
import org.jsp.moneyexpenses.dto.User;
import org.jsp.moneyexpenses.exception.InvalidIdException;
import org.jsp.moneyexpenses.exception.InvalidPhoneOrPasswordException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service

public class UserService {

	@Autowired
	private UserDao uDao;
	
	public ResponseEntity<ResponseStructure<User>> save(User u)
	{
		ResponseStructure<User> s=new ResponseStructure<>();
		User u1=uDao.saveUser(u);
		s.setData(u1);
		s.setMessage("Account Created Successfully");
		s.setStatusCode(HttpStatus.OK.value());
		return new ResponseEntity<ResponseStructure<User>>(s,HttpStatus.OK);
	}
	
	
	
	public ResponseEntity<ResponseStructure<User>> update(User u)
	{
		ResponseStructure<User> s=new ResponseStructure<>();
		s.setData(uDao.updateUser(u));
		s.setMessage("Account Updated Successfully");
		s.setStatusCode(HttpStatus.ACCEPTED.value());
		return new ResponseEntity<ResponseStructure<User>>(s,HttpStatus.ACCEPTED);
	}
	
	public ResponseEntity<ResponseStructure<User>> fetch(int id)
	{
		ResponseStructure<User> s=new ResponseStructure<>();
		Optional<User> op= uDao.fetchById(id);
		
		if(op.isPresent())
		{
			s.setMessage("user found");
			s.setData(op.get());
			s.setStatusCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<User>>(s,HttpStatus.OK);
		}
		throw new InvalidIdException();
		
	}
	
	public ResponseEntity<ResponseStructure<User>> verify(String email,String password)
	{
		ResponseStructure<User> s=new ResponseStructure<>();
		Optional<User> op=Optional.ofNullable(uDao.verifyUser(email, password));
		
		if(op.isPresent())
		{
			s.setData(op.get());
			s.setMessage("User Verified Successfully");
			s.setStatusCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<User>>(s,HttpStatus.OK);
		}
		throw new InvalidPhoneOrPasswordException();
	}
	
}
